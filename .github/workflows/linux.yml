name: Linux
on:
  push:
    tags:
      - '*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Build Docker container
        run: |
          docker build . --file Dockerfile.linux --tag builder
      - name: Build artifacts
        run: |
          docker run --rm -v ${PWD}:/project builder python3 grabTitles.py
          docker run -e CC="zig cc -target x86_64-linux" -e CXX="zig c++ -target x86_64-linux" --rm -v ${PWD}:/project builder go build -ldflags="-s -w" -pgo=auto cmd/WiiUDownloader/main.go cmd/WiiUDownloader/darkMode.go cmd/WiiUDownloader/mainwindow.go cmd/WiiUDownloader/progressWindow.go cmd/WiiUDownloader/utils.go
      - name: Deploy WiiUDownloader
        run: |
          mv main WiiUDownloader
          docker run --privileged --rm -e DEPLOY_GTK_VERSION=3 -e OUTPUT="WiiUDownloader-Linux-x86_64.AppImage" -e UPDATE_INFORMATION="gh-releases-zsync|Xpl0itU|WiiUDownloader|latest|WiiUDownloader-*.AppImage.zsync" -v ${PWD}:/project builder linuxdeploy.AppImage --plugin gtk --plugin checkrt --output=appimage --create-desktop-file --executable=WiiUDownloader --appdir dist --icon-file data/WiiUDownloader.png
      - name: Upload Linux Artifact
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: True
          makeLatest: True
          omitBody: True
          omitBodyDuringUpdate: True
          omitNameDuringUpdate: True
          artifacts: "WiiUDownloader-*.AppImage"
          token: ${{ secrets.GITHUB_TOKEN }}
